import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';
import axios from 'axios';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Asia/Colombo").format("HH:mm:ss");
const xdate = moment.tz("Asia/Colombo").format("DD/MM/YYYY");
const time2 = moment().tz("Asia/Colombo").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const menu = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;

  const validCommands = ['fullmenu', 'menu', 'listcmd'];

  if (validCommands.includes(cmd)) {
    const str = `
‚ï≠‚îÅ‚îÅ‚îÅ‚ú∞*${config.BOT_NAME}*‚ú∞‚îà‚ä∑
‚îÉìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚å®Ô∏é‚îÉüë•ùó¢ùòÑùóªùó≤ùóø : *${config.OWNER_NAME}*
‚îÉ‚å®Ô∏é‚îÉüëÄùó®ùòÄùó≤ùóø : *${m.pushName}*
‚îÉ‚å®Ô∏é‚îÉüé≤ùó†ùóºùó±ùó≤ : *${mode}*
‚îÉ‚å®Ô∏é‚îÉüíªùó£ùóπùóÆùòÅùó≥ùóºùóøùó∫ : *${os.platform()}*
‚îÉ‚å®Ô∏é‚îÉü™ôùó£ùóøùó≤ùó≥ùó∂ùòÖ : [${prefix}]
‚îÉ‚å®Ô∏é‚îÉü™Üùó©ùó≤ùóøùòÄùó∂ùóºùóª : *3.1.0*
> …™·¥õs ·¥ò·¥è·¥ò·¥ã…™·¥Ö ·¥õ·¥á·¥Ñ ú…¥·¥è ü·¥è…¢…™·¥ás  
‚îÉìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑

> ${pushwish} *${m.pushName}*!

‚ï≠‚îÅ‚îÅ„Äî *Download Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üé≤ apk
‚îÉ‚óà‚îÉ‚Ä¢üíú facebook
‚îÉ‚óà‚îÉ‚Ä¢üíú mediafire
‚îÉ‚óà‚îÉ‚Ä¢üíú pinterestdl
‚îÉ‚óà‚îÉ‚Ä¢üíú gitclone
‚îÉ‚óà‚îÉ‚Ä¢üíú gdrive
‚îÉ‚óà‚îÉ‚Ä¢üíú insta
‚îÉ‚óà‚îÉ‚Ä¢üíú ytmp3
‚îÉ‚óà‚îÉ‚Ä¢üíú ytmp4
‚îÉ‚óà‚îÉ‚Ä¢üíú play
‚îÉ‚óà‚îÉ‚Ä¢üíú song
‚îÉ‚óà‚îÉ‚Ä¢üíú video
‚îÉ‚óà‚îÉ‚Ä¢üíú ytmp3doc
‚îÉ‚óà‚îÉ‚Ä¢üíú ytmp4doc
‚îÉ‚óà‚îÉ‚Ä¢üíú tiktok
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Converter Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üü° attp
‚îÉ‚óà‚îÉ‚Ä¢üü° attp2
‚îÉ‚óà‚îÉ‚Ä¢üü° attp3
‚îÉ‚óà‚îÉ‚Ä¢üü° ebinary
‚îÉ‚óà‚îÉ‚Ä¢üü° dbinary
‚îÉ‚óà‚îÉ‚Ä¢üü° emojimix
‚îÉ‚óà‚îÉ‚Ä¢üü° mp3
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *AI Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üê• ai
‚îÉ‚óà‚îÉ‚Ä¢üê• bug
‚îÉ‚óà‚îÉ‚Ä¢üê• report
‚îÉ‚óà‚îÉ‚Ä¢üê• gpt
‚îÉ‚óà‚îÉ‚Ä¢üê• dalle
‚îÉ‚óà‚îÉ‚Ä¢üê• remini
‚îÉ‚óà‚îÉ‚Ä¢üê• gemini
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Tools Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üóÑÔ∏è calculator
‚îÉ‚óà‚îÉ‚Ä¢‚ô•Ô∏è tempmail
‚îÉ‚óà‚îÉ‚Ä¢‚ô•Ô∏è checkmail
‚îÉ‚óà‚îÉ‚Ä¢‚ô•Ô∏è trt
‚îÉ‚óà‚îÉ‚Ä¢‚ô•Ô∏è tts
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Group Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üíù linkgroup
‚îÉ‚óà‚îÉ‚Ä¢üíù setppgc
‚îÉ‚óà‚îÉ‚Ä¢üíù setname
‚îÉ‚óà‚îÉ‚Ä¢üíù setdesc
‚îÉ‚óà‚îÉ‚Ä¢üíù group
‚îÉ‚óà‚îÉ‚Ä¢üíù gcsetting
‚îÉ‚óà‚îÉ‚Ä¢üíù welcome
‚îÉ‚óà‚îÉ‚Ä¢üíù add
‚îÉ‚óà‚îÉ‚Ä¢üíù kick
‚îÉ‚óà‚îÉ‚Ä¢üíù hidetag
‚îÉ‚óà‚îÉ‚Ä¢üíù tagall
‚îÉ‚óà‚îÉ‚Ä¢üíù antilink
‚îÉ‚óà‚îÉ‚Ä¢üíù antitoxic
‚îÉ‚óà‚îÉ‚Ä¢üíù promote
‚îÉ‚óà‚îÉ‚Ä¢üíù demote
‚îÉ‚óà‚îÉ‚Ä¢üíù getbio
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Search Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üëª play
‚îÉ‚óà‚îÉ‚Ä¢üëª yts
‚îÉ‚óà‚îÉ‚Ä¢üëª imdb
‚îÉ‚óà‚îÉ‚Ä¢üëª google
‚îÉ‚óà‚îÉ‚Ä¢üëª gimage
‚îÉ‚óà‚îÉ‚Ä¢üëª pinterest
‚îÉ‚óà‚îÉ‚Ä¢üëª wallpaper
‚îÉ‚óà‚îÉ‚Ä¢üëª wikimedia
‚îÉ‚óà‚îÉ‚Ä¢üëª ytsearch
‚îÉ‚óà‚îÉ‚Ä¢üëª ringtone
‚îÉ‚óà‚îÉ‚Ä¢üëª lyrics
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Main Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢‚è© ping
‚îÉ‚óà‚îÉ‚Ä¢‚è© alive
‚îÉ‚óà‚îÉ‚Ä¢‚è© owner
‚îÉ‚óà‚îÉ‚Ä¢‚è© menu
‚îÉ‚óà‚îÉ‚Ä¢‚è© infobot
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Owner Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ join
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ leave
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ block
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ unblock
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ setppbot
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ anticall
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ setstatus
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ setnamebot
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ autotyping
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ alwaysonline
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ autoread
‚îÉ‚óà‚îÉ‚Ä¢‚úÖ autosview
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî *Stalk Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚îÉ‚óà‚îÉ‚Ä¢üé≤ truecaller
‚îÉ‚óà‚îÉ‚Ä¢üòÅ instastalk
‚îÉ‚óà‚îÉ‚Ä¢üé≤ githubstalk
‚îÉ‚óàìáΩ‚å®‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é‚û™‚å®Ô∏é
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
> *${config.DESCRIPTION}*`;

    // Check if MENU_IMAGE exists in config and is not empty
    let menuImage;
    if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
      try {
        // Try to fetch the image from URL
        const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
        menuImage = Buffer.from(response.data, 'binary');
      } catch (error) {
        console.error('Error fetching menu image from URL, falling back to local image:', error);
        menuImage = fs.readFileSync('./media/popkid.jpg');
      }
    } else {
      // Use local image if MENU_IMAGE is not configured
      menuImage = fs.readFileSync('./media/popkid.jpg');
    }

    await Matrix.sendMessage(m.from, {
      image: menuImage,
      caption: str,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363290715861418@newsletter',
          newsletterName: "Popkid",
          serverMessageId: 143
        }
      }
    }, {
      quoted: m
    });

    // Send audio after sending the menu
    await Matrix.sendMessage(m.from, {
      audio: { url: 'https://files.catbox.moe/5df4ei.m4v' },
      mimetype: 'audio/mp4',
      ptt: true
    }, { quoted: m });
  }
};

export default menu;
